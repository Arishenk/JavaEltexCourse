/*
 * This file is generated by jOOQ.
 */
package com.arishenk.jook.Database.tables;


import com.arishenk.jook.Database.DefaultSchema;
import com.arishenk.jook.Database.tables.records.PassportsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Passports extends TableImpl<PassportsRecord> {

    private static final long serialVersionUID = -1467605575;

    /**
     * The reference instance of <code>passports</code>
     */
    public static final Passports PASSPORTS = new Passports();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PassportsRecord> getRecordType() {
        return PassportsRecord.class;
    }

    /**
     * The column <code>passports.id</code>.
     */
    public final TableField<PassportsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>passports.registration</code>.
     */
    public final TableField<PassportsRecord, String> REGISTRATION = createField("registration", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>passports</code> table reference
     */
    public Passports() {
        this(DSL.name("passports"), null);
    }

    /**
     * Create an aliased <code>passports</code> table reference
     */
    public Passports(String alias) {
        this(DSL.name(alias), PASSPORTS);
    }

    /**
     * Create an aliased <code>passports</code> table reference
     */
    public Passports(Name alias) {
        this(alias, PASSPORTS);
    }

    private Passports(Name alias, Table<PassportsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Passports(Name alias, Table<PassportsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PassportsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(com.arishenk.jook.Database.tables.Passports.PASSPORTS, "KEY_passports_PRIMARY", com.arishenk.jook.Database.tables.Passports.PASSPORTS.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PassportsRecord>> getKeys() {
        return Arrays.<UniqueKey<PassportsRecord>>asList(
              Internal.createUniqueKey(com.arishenk.jook.Database.tables.Passports.PASSPORTS, "KEY_passports_PRIMARY", com.arishenk.jook.Database.tables.Passports.PASSPORTS.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Passports as(String alias) {
        return new Passports(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Passports as(Name alias) {
        return new Passports(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Passports rename(String name) {
        return new Passports(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Passports rename(Name name) {
        return new Passports(name, null);
    }
}
