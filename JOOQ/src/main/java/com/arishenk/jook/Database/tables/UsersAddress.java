/*
 * This file is generated by jOOQ.
 */
package com.arishenk.jook.Database.tables;


import com.arishenk.jook.Database.DefaultSchema;
import com.arishenk.jook.Database.tables.records.UsersAddressRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersAddress extends TableImpl<UsersAddressRecord> {

    private static final long serialVersionUID = 1503874610;

    /**
     * The reference instance of <code>users_address</code>
     */
    public static final UsersAddress USERS_ADDRESS = new UsersAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersAddressRecord> getRecordType() {
        return UsersAddressRecord.class;
    }

    /**
     * The column <code>users_address.address_id</code>.
     */
    public final TableField<UsersAddressRecord, Integer> ADDRESS_ID = createField("address_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>users_address.id</code>.
     */
    public final TableField<UsersAddressRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>users_address</code> table reference
     */
    public UsersAddress() {
        this(DSL.name("users_address"), null);
    }

    /**
     * Create an aliased <code>users_address</code> table reference
     */
    public UsersAddress(String alias) {
        this(DSL.name(alias), USERS_ADDRESS);
    }

    /**
     * Create an aliased <code>users_address</code> table reference
     */
    public UsersAddress(Name alias) {
        this(alias, USERS_ADDRESS);
    }

    private UsersAddress(Name alias, Table<UsersAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersAddress(Name alias, Table<UsersAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersAddressRecord> getPrimaryKey() {
        return Internal.createUniqueKey(com.arishenk.jook.Database.tables.UsersAddress.USERS_ADDRESS, "KEY_users_address_PRIMARY", com.arishenk.jook.Database.tables.UsersAddress.USERS_ADDRESS.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersAddressRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersAddressRecord>>asList(
              Internal.createUniqueKey(com.arishenk.jook.Database.tables.UsersAddress.USERS_ADDRESS, "KEY_users_address_PRIMARY", com.arishenk.jook.Database.tables.UsersAddress.USERS_ADDRESS.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersAddress as(String alias) {
        return new UsersAddress(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersAddress as(Name alias) {
        return new UsersAddress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersAddress rename(String name) {
        return new UsersAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersAddress rename(Name name) {
        return new UsersAddress(name, null);
    }
}
