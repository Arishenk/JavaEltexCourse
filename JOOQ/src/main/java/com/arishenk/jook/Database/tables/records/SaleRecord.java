/*
 * This file is generated by jOOQ.
 */
package com.arishenk.jook.Database.tables.records;


import com.arishenk.jook.Database.tables.Sale;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SaleRecord extends UpdatableRecordImpl<SaleRecord> implements Record2<Double, byte[]> {

    private static final long serialVersionUID = 2069823705;

    /**
     * Setter for <code>Sale.cost</code>.
     */
    public void setCost(Double value) {
        set(0, value);
    }

    /**
     * Getter for <code>Sale.cost</code>.
     */
    public Double getCost() {
        return (Double) get(0);
    }

    /**
     * Setter for <code>Sale.items</code>.
     */
    public void setItems(byte... value) {
        set(1, value);
    }

    /**
     * Getter for <code>Sale.items</code>.
     */
    public byte[] getItems() {
        return (byte[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Double> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Double, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Double, byte[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field1() {
        return Sale.SALE.COST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field2() {
        return Sale.SALE.ITEMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component1() {
        return getCost();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component2() {
        return getItems();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value1() {
        return getCost();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value2() {
        return getItems();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SaleRecord value1(Double value) {
        setCost(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SaleRecord value2(byte... value) {
        setItems(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SaleRecord values(Double value1, byte[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SaleRecord
     */
    public SaleRecord() {
        super(Sale.SALE);
    }

    /**
     * Create a detached, initialised SaleRecord
     */
    public SaleRecord(Double cost, byte[] items) {
        super(Sale.SALE);

        set(0, cost);
        set(1, items);
    }
}
