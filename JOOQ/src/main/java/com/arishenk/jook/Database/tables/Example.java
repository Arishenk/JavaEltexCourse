/*
 * This file is generated by jOOQ.
 */
package com.arishenk.jook.Database.tables;


import com.arishenk.jook.Database.DefaultSchema;
import com.arishenk.jook.Database.tables.records.ExampleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Example extends TableImpl<ExampleRecord> {

    private static final long serialVersionUID = -357994201;

    /**
     * The reference instance of <code>EXAMPLE</code>
     */
    public static final Example EXAMPLE = new Example();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExampleRecord> getRecordType() {
        return ExampleRecord.class;
    }

    /**
     * The column <code>EXAMPLE.id</code>.
     */
    public final TableField<ExampleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>EXAMPLE.letter</code>.
     */
    public final TableField<ExampleRecord, String> LETTER = createField("letter", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>EXAMPLE</code> table reference
     */
    public Example() {
        this(DSL.name("EXAMPLE"), null);
    }

    /**
     * Create an aliased <code>EXAMPLE</code> table reference
     */
    public Example(String alias) {
        this(DSL.name(alias), EXAMPLE);
    }

    /**
     * Create an aliased <code>EXAMPLE</code> table reference
     */
    public Example(Name alias) {
        this(alias, EXAMPLE);
    }

    private Example(Name alias, Table<ExampleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Example(Name alias, Table<ExampleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExampleRecord, Integer> getIdentity() {
        return Internal.createIdentity(com.arishenk.jook.Database.tables.Example.EXAMPLE, com.arishenk.jook.Database.tables.Example.EXAMPLE.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExampleRecord> getPrimaryKey() {
        return Internal.createUniqueKey(com.arishenk.jook.Database.tables.Example.EXAMPLE, "KEY_EXAMPLE_PRIMARY", com.arishenk.jook.Database.tables.Example.EXAMPLE.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExampleRecord>> getKeys() {
        return Arrays.<UniqueKey<ExampleRecord>>asList(
              Internal.createUniqueKey(com.arishenk.jook.Database.tables.Example.EXAMPLE, "KEY_EXAMPLE_PRIMARY", com.arishenk.jook.Database.tables.Example.EXAMPLE.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Example as(String alias) {
        return new Example(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Example as(Name alias) {
        return new Example(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Example rename(String name) {
        return new Example(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Example rename(Name name) {
        return new Example(name, null);
    }
}
